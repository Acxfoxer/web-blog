server:
  port: 8111
spring:
  profiles:
    active: dev
  application:
    name: onstage
  email:
    email_account: sunmonkeywudi@gmail.com
    userName: axcfoxer
  #数据源配置
  datasource:
    url: AIDSREN(AEN(༔༎༌།໤༗༣༝༛༖໤໙໙໛ໝ໣໘໛ໟ໣໘໛ໞ໚໘໠໛໤ໝໝ໚໠໙༗༣༉༌༖༙༑໩༟༝༏໿༘༓།༙༎༏໧༞༜༟༏໐།༒་༜་།༞༏༜໯༘།༙༎༓༘༑໧༟༞༐໗໢໐༟༝༏໽໽໶໧༐་༖༝༏໐༝༏༜༠༏༜໾༓༗༏༤༙༘༏໧໿໾໭໐་༖༖༙༡໺༟༌༖༓།໵༏༣໼༏༞༜༓༏༠་༖໧༞༜༟༏))
    username: AIDSREN(AEN(༞༜༟༎༏༉༖༏༓))
    password: AIDSREN(AEN(༝༟༘༗༙༘༕༏༣໪༗༣༝༛༖໢༉໶༣༚))
    driver-class-name: com.mysql.cj.jdbc.Driver
  #servlet配置
  servlet:
    multipart:
      max-file-size: 1000MB
      max-request-size: 1000MB
  #redis配置
  redis:
    host: AIDSREN(AEN(໛ໝ໣໘໛ໟ໣໘໛ໞ໚໘໠໛))
    username: AIDSREN(AEN(༞༜༟༎༏༉༖༏༓༉༜༏༎༓༝))
    password: AIDSREN(AEN(༝༟༘༗༙༘༕༏༣໪༜༏༎༓༝༉໶༣༚))
  #kafka配置
  kafka:
    bootstrap-servers: 139.159.140.61:9092
    producer:
      # 发生错误后，消息重发的次数。
      retries: 0
      #当有多个消息需要被发送到同一个分区时，生产者会把它们放在同一个批次里。该参数指定了一个批次可以使用的内存大小，按照字节数计算。
      batch-size: 16384
      # 设置生产者内存缓冲区的大小。
      buffer-memory: 33554432
      # 键的序列化方式
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      # 值的序列化方式
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      # acks=0 ： 生产者在成功写入消息之前不会等待任何来自服务器的响应。
      # acks=1 ： 只要集群的首领节点收到消息，生产者就会收到一个来自服务器成功响应。
      # acks=all ：只有当所有参与复制的节点全部收到消息时，生产者才会收到一个来自服务器的成功响应。
      acks: 1
    consumer:
      # 自动提交的时间间隔 在spring boot 2.X 版本中这里采用的是值的类型为Duration 需要符合特定的格式，如1S,1M,2H,5D
      auto-commit-interval: 1S
      # 该属性指定了消费者在读取一个没有偏移量的分区或者偏移量无效的情况下该作何处理：
      # latest（默认值）在偏移量无效的情况下，消费者将从最新的记录开始读取数据（在消费者启动之后生成的记录）
      # earliest ：在偏移量无效的情况下，消费者将从起始位置读取分区的记录
      auto-offset-reset: earliest
      # 是否自动提交偏移量，默认值是true,为了避免出现重复数据和数据丢失，可以把它设置为false,然后手动提交偏移量
      enable-auto-commit: false
      # 键的反序列化方式
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      # 值的反序列化方式
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      group-id: blog
    listener:
      # 在侦听器容器中运行的线程数。
      concurrency: 5
      #listner负责ack，每调用一次，就立即commit
      ack-mode: manual_immediate
      missing-topics-fatal: false
  # 热部署
#  devtools:
#    restart:
#      enabled: true
#      additional-paths: src/main/java
#      exclude: WEB-INF/**
  #使用Thymeleaf模板引擎，关闭缓存
  thymeleaf:
    cache: false
    check-template-location: true
  #发送邮件配置
  mail:
    host: smtp.gmail.com
    username: sunmonkeywudi@gmail.com
    password: sqil kzto ifgp mauh
    default-encoding: utf-8
    port: 587
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
            required: true

  #mybatis-plus配置
mybatis-plus:
  mapper-locations: classpath:mapper/*.xml
  configuration:
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
  global-config:
    db-config:
      # 配置MyBatis-Plus操作表的默认前缀
      table-prefix: t_
      # id生成策略自动增长,雪花id策略
      id-type: assign_id
      logic-delete-value: 1
      logic-delete-field: delFlag
knife4j:
  # 开启增强配置
  # 开启Swagger的Basic认证功能,默认是false
  enable: true
  basic:
    enable: true
    # Basic认证用户名
    username: AIRSREN(AEN(༖༏༏))
    # Basic认证密码
    password: AIRSREN(AEN(໛ໜໝໞ)

logging:
  file:
    #日志保存到项目路径下的log文件夹里面
    path: ./log
jwt:
  tokenHeader: Authorization #JWT存储的请求头
  secret: lyp_dsb #JWT加解密使用的密钥
  expiration: 604800 #JWT的超期限时间(60*60*24*7)
  tokenHead: 'BeeBee ' #JWT负载中拿到头
#  加解密服务配置
idaas:
  decryptor:
    decrypt-password: 3754
    url:
    custom-get-cryptor-class:
  encryptor:
    algorithm: kaiser
    encrypt-password: 3754